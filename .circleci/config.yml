version: 2.1
orbs:
  slack: circleci/slack@4.1.1
  aws-eks: circleci/aws-eks@0.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.3.0

parameters:
  cluster-name:
    type: string
    default: "capstone-employee"

commands:
  destroy-environment:
    description: Destroy backend and frontend stacks.
    steps:      
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}  
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
            echo "************** SUCCESS = $SUCCESS"
            if(( $SUCCESS==1 )); 
            then
             cd backend
             npm install
             npm run migrations:revert
            fi      
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
        environment:
          baseUrl: http://local:9095
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Build front-end
          command: |            
            cd angular8-crud-demo      
            npm install
            npm run build --prod 
      - save_cache:
          paths:
            - angular8-crud-demo/node_modules
            - angular8-crud-demo/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/openjdk:11-jdk        
    steps:
    - checkout
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "springboot-crud-api/pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-    
    - run:
        name: Back-end build
        command: |
          cd springboot-crud-api
          echo 'export DATABASE_URL=jdbc:mysql://capstone.caejyuh3eggl.eu-west-1.rds.amazonaws.com:3306/capstone' >> $BASH_ENV
          echo 'export DATABASE_USER=admin' >> $BASH_ENV
          echo 'export DATABASE_PASSWORD=Capstone21' >> $BASH_ENV
          source $BASH_ENV     
          mvn clean install -DskipTests
    - save_cache:
          paths: 
            - ~/.m2
          key: v1-dependencies-{{ checksum "springboot-crud-api/pom.xml" }}
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Test front-end
          no_output_timeout: 20m
          command: |
            cd angular8-crud-demo     
            npm run test
                
  test-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
    - checkout
    - restore_cache:
        keys: 
          - v1-dependencies-{{ checksum "springboot-crud-api/pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-    
    - run:
        name: Test Back-end
        command: |
          cd springboot-crud-api
          mvn dependency:go-offline
          echo 'export DATABASE_URL=jdbc:mysql://capstone.caejyuh3eggl.eu-west-1.rds.amazonaws.com:3306/capstone' >> $BASH_ENV
          echo 'export DATABASE_USER=admin' >> $BASH_ENV
          echo 'export DATABASE_PASSWORD=Capstone21' >> $BASH_ENV
          source $BASH_ENV     
          mvn test
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update        
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: 'circleci/openjdk:11-jdk'
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v1-dependencies-{{ checksum "springboot-crud-api/pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies- 
      - run:
          name: Analyze on SonarCloud
          command: |
            cd springboot-crud-api
            mvn dependency:go-offline        
            mvn verify sonar:sonar

   

  build_and_push:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:latest"' >> $BASH_ENV
      - restore_cache:
          keys: 
            - v1-dependencies-{{ checksum "springboot-crud-api/pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies- 
      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build image
          command: |
            cd springboot-crud-api
            mvn dependency:go-offline
            mvn package
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME

  create-eks-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/create-cluster:
          cluster-name: << pipeline.parameters.cluster-name >>
          aws-region: $AWS_DEFAULT_REGION
          nodegroup-name: ng-1
          node-type: t2.micro
          nodes: 1
          

 

workflows:
  default:
    jobs:      
      - build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          context: SonarCloud
          requires: [build-backend]
      - build_and_push:
          requires: [test-backend]
      - create-eks-cluster:
          requires: [build_and_push]